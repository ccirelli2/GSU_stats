x
x <- range(c(0,100))
x
x <- range(c(0:100))
x
x <- range(0:100)
x
x <- range(0:100, 10)
x
x <- seq(0,10)
x
e <- exp(x)
e
e <- exp(-x)
e
e <- exp(-1*x)
e
plot(e)
x <- seq(-10,10)
e <- exp(-1*x)
plot(e)
x <- seq(0..5,10)
e <- exp(-1*x)
plot(e)
x <- seq(0.0005,10)
e <- exp(-1*x)
plot(e)
x <- seq(0.0005,10, 100)
e <- exp(-1*x)
plot(e)
x <- c(0.0001, 0.001, 0.01, 0.1, 1.0, 10, 100, 1000)
e <- exp(-1*x)
plot(x)
e <- 1/ exp(-1*x)
plot(x)
e <- 1/ exp(-1*x)
plot(x)
plot(e)
# Logistic Regression
rm(ls = list())
# Logistic Regression
rm(list = ls())
x <- c(0.0001, 0.001, 0.01, 0.1, 1.0, 10, 100, 1000)
e <- 1/ exp(-1*x)
plot(e)
plot(x)
plot(e)
e
plot(x)
plot(e)
e_log = 1/(1+(exp(-1*x)))
plot(e_log)
exp(.001)
exp(1)
exp(11)
exp(1)
exp(.000001)
exp(.000000001)
exp(-1*.001)
exp(-1*.00000001)
exp(.000001)
exp(-1*.00000001)
exp(1)
exp(2)
exp(-1)
exp(1)
exp(1) / exp(1)
1 / exp(1)
exp(-2)
(1/exp(1) / exp(1))
?predict()
z0 <- qnorm(0.5/2, 51.3)
z0
?qnorm()
z0 = qnomr(0.5/2)
z0 = qnorm(0.5/2)
z0
z0 = qnorm(0.5/2, lower.tail = FALSE)
z0
z0 = qnorm(0.5/2, 50.5, 4, lower.tail = FALSE)
z0
z0 = qnorm(0.5/2, 50.5, 4, lower.tail = TRUE)
z0
# Calculate Z_value
Z_value = abs(qnorm(alpha/2))
# Variables
mu <- 50
Xbar <- 51.3
stdv <- 2
n <- 25
alpha <- .05
# Calculate Z0
Z0 <- (Xbar - mu) / stdv/sqrt(2)
# Calculate Z_value
Z_value = abs(qnorm(alpha/2))
Z_value
?abs
z0 = qnorm(0.5/2)
z0
z0 = qnorm(0.05/2)
z0
z0 = qnorm(0.05/2, lower.tail = FALSE)
z0
# Variables
mu <- 50
Xbar <- 51.3
stdv <- 2
n <- 25
alpha <- .05
# Calculate Z0
Z0 <- (Xbar - mu) / stdv/sqrt(2)
# Calculate Z_value
Z_value = abs(qnorm(alpha/2))
Z_value
# Calculate Z_value
Z_value = abs(qnorm(alpha/2))
Z_value
rm(list = ls())
# Variables
mu <- 50
Xbar <- 51.3
stdv <- 2
n <- 25
alpha <- .05
# Calculate Z0
Z0 <- (Xbar - mu) / stdv/sqrt(2)
Z_value = qnorm(alpha/2, lower.tail = FALSE)
Z_value
# Manually Calculate z0
Z0 <- (Xbar - mu) / (2/sqrt(n))
rm(list = ls())
# Dataset - From Class Presentation
mu <- 51.3
rm(list = ls())
# Dataset - From Class Presentation
mu <- 50               # Assumed value that we are testing
x_bar <- 51.3
stdv <- 4
n <- 5
alpha <- .05
# Manually Calculate z0
Z0 <- (Xbar - mu) / (2/sqrt(n))
# Manually Calculate z0
Z0 <- (x_bar - mu) / (2/sqrt(n))
sigma.2 <- 4
Z0 <- (x_bar - mu) / (sqrt(sigma.2)/sqrt(n))
z0 <- (x_bar - mu) / (sqrt(sigma.2)/sqrt(n))
z.alpha = qnorm(alpha/2, lower.tail = FALSE)
rm(list = ls())
# Dataset - From Class Presentation
mu <- 50               # Assumed value that we are testing
x_bar <- 51.3
sigma.2 <- 4
n <- 5
alpha <- .05
z0 <- (x_bar - mu) / (sqrt(sigma.2)/sqrt(n))
z.alpha = qnorm(alpha/2, lower.tail = FALSE)
print(z0 > z.alpha)
# Test Hypothesis
L_bound <- round(Xbar - Z_value/(stdv/sqrt(n)),2)
U_bound <- round(Xbar + Z_value/(stdv/sqrt(n)),2)
print(paste(L_bound, mu, U_bound))
# Test Hypothesis
L_bound <- round(Xbar - Z_value/(stdv/sqrt(n)),2)
# Test Hypothesis
L_bound <- round(x_bar - Z_value/(stdv/sqrt(n)),2)
U_bound <- round(x_bar + Z_value/(stdv/sqrt(n)),2)
print(paste(L_bound, mu, U_bound))
# Test Hypothesis
L_bound <- round(x_bar - Z_value/(stdv/sqrt(n)),2)
# Test Hypothesis
L_bound <- round(x_bar - z0/(stdv/sqrt(n)),2)
U_bound <- round(x_bar + z0/(stdv/sqrt(n)),2)
# Test Hypothesis
L_bound <- round(x_bar - z0/(sqrt(sigma.2)/sqrt(n)),2)
U_bound <- round(x_bar + z0/(sqrt(sigma.2)/sqrt(n)),2)
print(paste(L_bound, mu, U_bound))
# Calculating P value
z <- (x_bar-mu) / (sqrt(sigma.2)/sqrt(n))
p_value <- 2*pnorm(-abs(z))
p_value <- alpha/2 # A pvalue < alpha and we reject H0.
# Example #1:  Known Variance-------------------------------------------------------
rm(list = ls())
# Dataset - From Class Presentation
mu <- 50               # Assumed value that we are testing
x_bar <- 51.3
sigma.2 <- 4
n <- 5
alpha <- .05
# Calculating P value
z <- (x_bar-mu) / (sqrt(sigma.2)/sqrt(n))
p_value <- 2*pnorm(-abs(z))
p_value < alpha/2 # A pvalue < alpha and we reject H0.
# Calculating P value
z <- (x_bar-mu) / (sqrt(sigma.2)/sqrt(n))
p_value <- 2*pnorm(-abs(z))
p_value
p_value <- 2*pnorm(abs(z))
p_value
p_value <- 2*pnorm(-abs(z))
p_value
?qnorm()
pwr.norm.test(d = 1, sig.level = 0.5, n = 5)
?pwr
??pwr
library(pwr)
pwr.norm.test(d = 1, sig.level = 0.5, n = 5)
# Calculate n for Power = .95
pwr.norm.test(d = 1, sig.level = 0.5, power = 0.95)
# Calculate Power
power <- pwr.norm.test(d = 1, sig.level = 0.5, n = 5)
power
print(p_typeII_error)
# Calculate Power
power <- pwr.norm.test(d = 1, sig.level = 0.5, n = 5)
p_typeII_error <- 1- power
print(p_typeII_error)
p_typeII_error <- 1- power
# Calculate Power
power <- pwr.norm.test(d = 1, sig.level = 0.5, n = 5)
power
p_typeII_error <- 1-0.9426102
# Example #1:  Known Variance-------------------------------------------------------
rm(list = ls())
mu <- 50
x_bar <- 51.3
S.2 <- 4
n <- 5
alpha <- .05
pnorm(1.95)
# Example #1:  Known Variance-------------------------------------------------------
rm(list = ls())
# Dataset - From Class Presentation
mu <- 50               # Assumed value that we are testing
# Dataset - From Class Presentation
mu <- 50               # Assumed value that we are testing
x_bar <- 51.3
sigma.2 <- 4
n <- 5
alpha <- .05
z0 <- (x_bar - mu) / (sqrt(sigma.2)/sqrt(n))
z.alpha = qnorm(alpha/2, lower.tail = FALSE)
pnorm(z.alpha)
pnorm(z.alpha)
data()
data(ChickWeight)
chick_data = data(ChickWeight)
# Example #1:  Known Variance-------------------------------------------------------
rm(list = ls())
chick_data <- data(ChickWeight)
chick_weight <-
chick_data <- data(ChickWeight)
show(chick_data)
chick_data <- data('ChickWeight')
show(chick_data)
ChickWeight
ChickWeight(0,:)
chick_wegith <- ChickWeight$weight
chick_weigth <- ChickWeight$weight
chick_weight <- ChickWeight$weight
qqnor(chick_weight)
qqnorm(chick_weight)
qqline(chick_weight)
# Example #1:  Known Variance-------------------------------------------------------
rm(list = ls())
chick_weight <- ChickWeight$weight
qqnorm(chick_weight)
qqline(chick_weight)
shapiro.test(chick_weight)
?qt()
# Unknown Variance____________________________________________________________________________
rm(list = ls())
mu <- 50
x_bar <- 51.3
S.2 <- 4
n <- 5
alpha <- .05
z.alpha.05 <- qt(alpha/2, df = 1-n, lower.tail = FALSE)
z.alpha.05 <- qt(alpha/2, 1-n, lower.tail = FALSE)
rm(list = ls())
mu <- 50
x_bar <- 51.3
S.2 <- 4
n <- 5
alpha <- .05
z.alpha.05 <- qt(alpha/2, df = n-1, lower.tail = FALSE)
z.alpha.05
lb <- x_bar - x.alpha.05 * (sqrt(S.2) / sqrt(n))
lb <- x_bar - z.alpha.05 * (sqrt(S.2) / sqrt(n))
ub <- x_bar + z.alpha.05 * (sqrt(S.2) / sqrt(n))
print(lb, x_bar, ub)
lb <- x_bar - z.alpha.05 * (sqrt(S.2) / sqrt(n))
ub <- x_bar + z.alpha.05 * (sqrt(S.2) / sqrt(n))
print(lb, x_bar, ub)
print(c(lb, x_bar, ub))
?sd()
qnorm()
?qnorm()
# P Values
rm(list = ls())
rm(list = ls())
mu.0 <- 50
x_bar <- 51.3
S.2 <- 4
n <- 5
alpha <- .05
p.value <- pnorm(x_bar)
p.value
p.value <- qnorm(1.4)
p.value <- pnorm(1.4)
p.value <- pnorm(4.4)
p.value <- pnorm(abs(4.4))
p.value <- pnorm(abs(4.4))
rm(list = ls())
mu.0 <- 50
x_bar <- 51.3
S.2 <- 4
n <- 5
alpha <- .05
p.value <- pnorm(abs(4.4))
p.value <- pnorm(-abs(4.4))
p.value <- 2 * pnorm(-abs(4.4))
p.value <- 1 - pnorm(x_bar)
p.value <- 2* (1 - pnorm(x_bar))
p.value
p.value <- 2* (1 - pnorm(x_bar, mu.0, S.2))
p.value <- 2* (1 - pnorm(x_bar, mu.0, sqrt(S.2))
p.value <- 2* (1 - pnorm(x_bar, mu.0, sqrt(S.2)))
p.value
rm(list = ls())
a <- 5
s <- 2
n <- 20
xbar <- 7
p.value <- 2* (1 - pnorm(x_bar, mu.0, sqrt(S.2)))
p.value <- 2* (1 - pnorm(xbar, a, sqrt(s)))
p.value <- 2* (1 - pnorm(xbar, mean = a, sd = s/sqrt(s)))
p.value <- 2* (1 - pnorm(xbar, mean = a, sd = s/sqrt(s)))
rm(list = ls())
a <- 5
s <- 2
n <- 20
xbar <- 7
p.value <- 2* (1 - pnorm(xbar, mean = a, sd = s/sqrt(s)))
p.value <- 2 * (1-pnorm(xbar, mean = a, sd = (s/sqrt(20))))
install.packages('ISLR')
?ISLR
library(ISLR)
summary(Default)
library(ISLR)
# Import Dataset-----------------------------
rm(list = ls())
?attach
# Generate Logistic Regression Model
attach(Default)
summary(default)
glm1 <- glm(default ~ balance, family = binomial)
summary(glm1)
summary(glm1)$ coefficients
summary(glm1)
glm1 <- glm(default ~ Default$student + Default$balance + Default$income, family = binomial)
summary(glm1)
summary(glm1)$ coefficients()
summary(glm1)$ coefficients
# m2:  Using only balance
glm2 <- glm(default ~ balance, family = binomial())
# m2:  Using only balance
glm2 <- glm(default ~ balance, family = binomial
# Import Dataset---------------------------------------
rm(list = ls())
library(ISLR)
# Generate Logistic Regression Models-----------------
attach(Default)        # Add Default to the namespace.
# m2:  Using only balance
glm2 <- glm(default ~ balance, family = binomial)
summary(glm2)
summary(glm2)$ coefficients
x0 <- data.frame("balance" = 1000)
x0
summary(x0)
p.x0 <- predict.glm(glm2, newdata = x0, type = 'response')
print(p.x0)
p.x0.2 <- 1 / (1 + exp(-1 * -10.651 + 0.00549*1000))
p.x0.2
p.x0.2 <- 1 / (1 + exp(-1 * 10.651 + 0.00549*1000))
p.x0.2 <- 1 / (1 + exp(-1 * -10.651 + 0.00549*1000))
p.x0.2 <- 1 / (1 + exp(-1 * (-10.651 + 0.00549*1000))
e^1
exp(1)
exp(-1)
p.x0.2 <- 1 / (1 + exp(-1 * (-10.651 + 0.00549*1000))
a <- 6
6 -> a
6 -> b
list()
list()
a <- 6
6 -> b
list()
l()
ls()
rm(list = ls())
?rm()
rm
x <- 0:19
x
x <- 0:19
x[5]
runif(20, min = 10, max = 20)
runif(20, min = 10, max = 20)
# Assign Random Numbers to List:
x <- 0:20
rm(list = ls())
# Assign Random Numbers to List:
y <- 0:20
c <- runif(20, min = 10, max = 20)
rm(list = ls())
d <- runif(20, min = 10, max = 20)
d
rm(list = ls())
# Plots
x <- runif(20, min = 0, max = 10)
y <- runif(20, min = 5, max = 10)
plot(x,y)
# Plot Normal Distribution
x <- runif(100)
y <- runif(100)
plot(x,y)
hist(x,y)
hist(x,y)
hist(x)
# Plot Normal Distribution
x <- runif(10000)
hist(x)
# Plot Normal Distribution
x <- runif(100000)
hist(x)
dnorm(x)
hist(x)
x.norm <- dnorm(x)
hist(x.norm)
plot(rnorm(100))
hist(rnorm(100))
hist(rnorm(10000))
# Plots
hist(rnorm(100000))
# Plots
x_norm <- rnorm(100000))
qqnorm(x_norm)
x.norm <- dnorm(x)
hist(x.norm)
qqnorm(x.norm)
qqplot(x.norm)
qqnorm(x.norm)
qqnorm(x.norm)
qqnorm(x.norm)
help.search('random')
example('plot')
()
print('hello world')
seq(1, 10, by = 2)
seq(1, 10, length = 5)
source('normal.R')
source('normal.R')
ls
getwd()
getwd('/home/ccirelli2/Desktop/Programming/R-Code/R_Statistics_Book')
setwd('/home/ccirelli2/Desktop/Programming/R-Code/R_Statistics_Book')
source('normal.R')
source('normal.R')
source('normal.R')
test_ <- source('normal.R')
test_ <- source('normal.R')
test_
test_
rm(list = ls())
shit <- source('normal.R')
shit <- source('normal.R')
# Vectors:
x <- vecotr(mode = 'numeric', length = 100)
# Vectors:
x <- vector(mode = 'numeric', length = 100)
x
# Check object type:
mode(x)
# Create a Vector
x <- 1:10
x <- c(1,3,4)
x <- vector(10)
x <- vector(length = 10)
x <- vector(integer = 10)
x <- integer(10)
print(x)
x <- double(10)
x
x <- character(10)
x
x <- c('1', 3, 4)
x
x <- 0:10
length(x)
sum(x)
mean(x)
x <- c(1,2,3,4,5)
y <- x*2
y
x - y
x <- c(0,1,2,4,5)
x[4]
options(digits = 3)
x <- .00000004
rm(list = ls())
